{"ast":null,"code":"import { getCurrentHub } from '@sentry/browser';\nimport { timestampWithMs } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { REACT_MOUNT_OP, REACT_UPDATE_OP, REACT_RENDER_OP } from './constants.js';\nvar _jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/profiler.tsx\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nvar UNKNOWN_COMPONENT = 'unknown';\n/**\n * The Profiler component leverages Sentry's Tracing integration to generate\n * spans based on component lifecycles.\n */\n\nclass Profiler extends React.Component {\n  /**\n   * The span of the mount activity\n   * Made protected for the React Native SDK to access\n   */\n  __init() {\n    this._mountSpan = undefined;\n  }\n  /**\n   * The span that represents the duration of time between shouldComponentUpdate and componentDidUpdate\n   */\n\n\n  __init2() {\n    this._updateSpan = undefined;\n  } // eslint-disable-next-line @typescript-eslint/member-ordering\n\n\n  static __initStatic() {\n    this.defaultProps = {\n      disabled: false,\n      includeRender: true,\n      includeUpdates: true\n    };\n  }\n\n  constructor(props) {\n    super(props);\n\n    Profiler.prototype.__init.call(this);\n\n    Profiler.prototype.__init2.call(this);\n\n    ;\n    const {\n      name,\n      disabled = false\n    } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    var activeTransaction = getActiveTransaction();\n\n    if (activeTransaction) {\n      this._mountSpan = activeTransaction.startChild({\n        description: `<${name}>`,\n        op: REACT_MOUNT_OP\n      });\n    }\n  } // If a component mounted, we can finish the mount activity.\n\n\n  componentDidMount() {\n    if (this._mountSpan) {\n      this._mountSpan.finish();\n    }\n  }\n\n  shouldComponentUpdate(_ref) {\n    let {\n      updateProps,\n      includeUpdates = true\n    } = _ref;\n\n    // Only generate an update span if includeUpdates is true, if there is a valid mountSpan,\n    // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.\n    // We are just trying to give baseline clues for further investigation.\n    if (includeUpdates && this._mountSpan && updateProps !== this.props.updateProps) {\n      // See what props haved changed between the previous props, and the current props. This is\n      // set as data on the span. We just store the prop keys as the values could be potenially very large.\n      var changedProps = Object.keys(updateProps).filter(k => updateProps[k] !== this.props.updateProps[k]);\n\n      if (changedProps.length > 0) {\n        var now = timestampWithMs();\n        this._updateSpan = this._mountSpan.startChild({\n          data: {\n            changedProps\n          },\n          description: `<${this.props.name}>`,\n          op: REACT_UPDATE_OP,\n          startTimestamp: now\n        });\n      }\n    }\n\n    return true;\n  }\n\n  componentDidUpdate() {\n    if (this._updateSpan) {\n      this._updateSpan.finish();\n\n      this._updateSpan = undefined;\n    }\n  } // If a component is unmounted, we can say it is no longer on the screen.\n  // This means we can finish the span representing the component render.\n\n\n  componentWillUnmount() {\n    const {\n      name,\n      includeRender = true\n    } = this.props;\n\n    if (this._mountSpan && includeRender) {\n      // If we were able to obtain the spanId of the mount activity, we should set the\n      // next activity as a child to the component mount activity.\n      this._mountSpan.startChild({\n        description: `<${name}>`,\n        endTimestamp: timestampWithMs(),\n        op: REACT_RENDER_OP,\n        startTimestamp: this._mountSpan.endTimestamp\n      });\n    }\n  }\n\n  render() {\n    return this.props.children;\n  }\n\n}\n\nProfiler.__initStatic();\n/**\n * withProfiler is a higher order component that wraps a\n * component in a {@link Profiler} component. It is recommended that\n * the higher order component be used over the regular {@link Profiler} component.\n *\n * @param WrappedComponent component that is wrapped by Profiler\n * @param options the {@link ProfilerProps} you can pass into the Profiler\n */\n\n\nfunction withProfiler(WrappedComponent, // We do not want to have `updateProps` given in options, it is instead filled through the HOC.\noptions) {\n  var componentDisplayName = options && options.name || WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  var Wrapped = props => React.createElement(Profiler, { ...options,\n    name: componentDisplayName,\n    updateProps: props,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    }\n  }, React.createElement(WrappedComponent, { ...props,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    }\n  }));\n\n  Wrapped.displayName = `profiler(${componentDisplayName})`; // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n/**\n *\n * `useProfiler` is a React hook that profiles a React component.\n *\n * Requires React 16.8 or above.\n * @param name displayName of component being profiled\n */\n\n\nfunction useProfiler(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    disabled: false,\n    hasRenderSpan: true\n  };\n  const [mountSpan] = React.useState(() => {\n    if (options && options.disabled) {\n      return undefined;\n    }\n\n    var activeTransaction = getActiveTransaction();\n\n    if (activeTransaction) {\n      return activeTransaction.startChild({\n        description: `<${name}>`,\n        op: REACT_MOUNT_OP\n      });\n    }\n\n    return undefined;\n  });\n  React.useEffect(() => {\n    if (mountSpan) {\n      mountSpan.finish();\n    }\n\n    return () => {\n      if (mountSpan && options.hasRenderSpan) {\n        mountSpan.startChild({\n          description: `<${name}>`,\n          endTimestamp: timestampWithMs(),\n          op: REACT_RENDER_OP,\n          startTimestamp: mountSpan.endTimestamp\n        });\n      }\n    }; // We only want this to run once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n}\n/** Grabs active transaction off scope */\n\n\nfunction getActiveTransaction() {\n  let hub = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getCurrentHub();\n\n  if (hub) {\n    var scope = hub.getScope();\n\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n\n  return undefined;\n}\n\nexport { Profiler, UNKNOWN_COMPONENT, getActiveTransaction, useProfiler, withProfiler };","map":{"version":3,"mappings":";;;;;AAAA;AAAA;;;AA0BA;AACA;AACA;AACA;;AACA;EACA;AACA;AACA;AACA;EACAA;IAAA;EAAA;EACA;AACA;AACA;;;EACAC;IAAA;EAAA,CATA,CAWA;;;EACA;IAAA;MACAC,eADA;MAEAC,mBAFA;MAGAC;IAHA;EAIA;;EAEAC;IACA;;IAAAC;;IAAAA;;IAAA;IACA;MAAAC;MAAAL;IAAA;;IAEA;MACA;IACA;;IAEA;;IACA;MACA;QACAM,wBADA;QAEAC;MAFA;IAIA;EACA,CAjCA,CAmCA;;;EACAC;IACA;MACA;IACA;EACA;;EAEAC;IAAA;MAAAC;MAAAR;IAAA;;IACA;IACA;IACA;IACA;MACA;MACA;MACA;;MACA;QACA;QACA;UACAS;YACAC;UADA,CADA;UAIAN,mCAJA;UAKAC,mBALA;UAMAM;QANA;MAQA;IACA;;IAEA;EACA;;EAEAC;IACA;MACA;;MACA;IACA;EACA,CAvEA,CAyEA;EACA;;;EACAC;IACA;MAAAV;MAAAJ;IAAA;;IAEA;MACA;MACA;MACA;QACAK,wBADA;QAEAU,+BAFA;QAGAT,mBAHA;QAIAM;MAJA;IAMA;EACA;;EAEAI;IACA;EACA;;AA5FA;;AA6FAb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,sBACAc,gBADA,EAEA;AACAC,OAHA,EAIA;EACA,2BACAA,qGADA;;EAGA,uBACAC;IAAAf;IAAAK;IAAAW;IAAAC;MAAAC;MAAAC;IAAA;EAAA,GACAJ;IAAAC;IAAAC;MAAAC;MAAAC;IAAA;EAAA,EADA,CADA;;EAMAC,0DAVA,CAYA;EACA;;EACAC;EACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,qBACArB,IADA,EAMA;EAAA,IAJAc,OAIA,uEAJA;IACAnB,eADA;IAEA2B;EAFA,CAIA;EACA;IACA;MACA;IACA;;IAEA;;IACA;MACA;QACArB,wBADA;QAEAC;MAFA;IAIA;;IAEA;EACA,CAdA;EAgBAa;IACA;MACAQ;IACA;;IAEA;MACA;QACAA;UACAtB,wBADA;UAEAU,+BAFA;UAGAT,mBAHA;UAIAM;QAJA;MAMA;IACA,CATA,CALA,CAeA;IACA;EACA,CAjBA,EAiBA,EAjBA;AAkBA;AAIA;;;;;;EAEA;IACA;;IACA;MACA;IACA;EACA;;EAEA;AACA","names":["__init","__init2","disabled","includeRender","includeUpdates","constructor","Profiler","name","description","op","componentDidMount","shouldComponentUpdate","updateProps","data","changedProps","startTimestamp","componentDidUpdate","componentWillUnmount","endTimestamp","render","WrappedComponent","options","React","__self","__source","fileName","lineNumber","Wrapped","hoistNonReactStatics","hasRenderSpan","mountSpan"],"sources":["C:\\Users\\Somayeh\\Documents\\GitHub\\ReactProject\\node_modules\\@sentry\\src\\profiler.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { getCurrentHub, Hub } from '@sentry/browser';\nimport { Span, Transaction } from '@sentry/types';\nimport { timestampWithMs } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\n\nimport { REACT_MOUNT_OP, REACT_RENDER_OP, REACT_UPDATE_OP } from './constants';\n\nexport const UNKNOWN_COMPONENT = 'unknown';\n\nexport type ProfilerProps = {\n  // The name of the component being profiled.\n  name: string;\n  // If the Profiler is disabled. False by default. This is useful if you want to disable profilers\n  // in certain environments.\n  disabled?: boolean;\n  // If time component is on page should be displayed as spans. True by default.\n  includeRender?: boolean;\n  // If component updates should be displayed as spans. True by default.\n  includeUpdates?: boolean;\n  // props given to component being profiled.\n  updateProps: { [key: string]: unknown };\n};\n\n/**\n * The Profiler component leverages Sentry's Tracing integration to generate\n * spans based on component lifecycles.\n */\nclass Profiler extends React.Component<ProfilerProps> {\n  /**\n   * The span of the mount activity\n   * Made protected for the React Native SDK to access\n   */\n  protected _mountSpan: Span | undefined = undefined;\n  /**\n   * The span that represents the duration of time between shouldComponentUpdate and componentDidUpdate\n   */\n  protected _updateSpan: Span | undefined = undefined;\n\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n  public static defaultProps: Partial<ProfilerProps> = {\n    disabled: false,\n    includeRender: true,\n    includeUpdates: true,\n  };\n\n  public constructor(props: ProfilerProps) {\n    super(props);\n    const { name, disabled = false } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    const activeTransaction = getActiveTransaction();\n    if (activeTransaction) {\n      this._mountSpan = activeTransaction.startChild({\n        description: `<${name}>`,\n        op: REACT_MOUNT_OP,\n      });\n    }\n  }\n\n  // If a component mounted, we can finish the mount activity.\n  public componentDidMount(): void {\n    if (this._mountSpan) {\n      this._mountSpan.finish();\n    }\n  }\n\n  public shouldComponentUpdate({ updateProps, includeUpdates = true }: ProfilerProps): boolean {\n    // Only generate an update span if includeUpdates is true, if there is a valid mountSpan,\n    // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.\n    // We are just trying to give baseline clues for further investigation.\n    if (includeUpdates && this._mountSpan && updateProps !== this.props.updateProps) {\n      // See what props haved changed between the previous props, and the current props. This is\n      // set as data on the span. We just store the prop keys as the values could be potenially very large.\n      const changedProps = Object.keys(updateProps).filter(k => updateProps[k] !== this.props.updateProps[k]);\n      if (changedProps.length > 0) {\n        const now = timestampWithMs();\n        this._updateSpan = this._mountSpan.startChild({\n          data: {\n            changedProps,\n          },\n          description: `<${this.props.name}>`,\n          op: REACT_UPDATE_OP,\n          startTimestamp: now,\n        });\n      }\n    }\n\n    return true;\n  }\n\n  public componentDidUpdate(): void {\n    if (this._updateSpan) {\n      this._updateSpan.finish();\n      this._updateSpan = undefined;\n    }\n  }\n\n  // If a component is unmounted, we can say it is no longer on the screen.\n  // This means we can finish the span representing the component render.\n  public componentWillUnmount(): void {\n    const { name, includeRender = true } = this.props;\n\n    if (this._mountSpan && includeRender) {\n      // If we were able to obtain the spanId of the mount activity, we should set the\n      // next activity as a child to the component mount activity.\n      this._mountSpan.startChild({\n        description: `<${name}>`,\n        endTimestamp: timestampWithMs(),\n        op: REACT_RENDER_OP,\n        startTimestamp: this._mountSpan.endTimestamp,\n      });\n    }\n  }\n\n  public render(): React.ReactNode {\n    return this.props.children;\n  }\n}\n\n/**\n * withProfiler is a higher order component that wraps a\n * component in a {@link Profiler} component. It is recommended that\n * the higher order component be used over the regular {@link Profiler} component.\n *\n * @param WrappedComponent component that is wrapped by Profiler\n * @param options the {@link ProfilerProps} you can pass into the Profiler\n */\nfunction withProfiler<P extends Record<string, any>>(\n  WrappedComponent: React.ComponentType<P>,\n  // We do not want to have `updateProps` given in options, it is instead filled through the HOC.\n  options?: Pick<Partial<ProfilerProps>, Exclude<keyof ProfilerProps, 'updateProps'>>,\n): React.FC<P> {\n  const componentDisplayName =\n    (options && options.name) || WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  const Wrapped: React.FC<P> = (props: P) => (\n    <Profiler {...options} name={componentDisplayName} updateProps={props}>\n      <WrappedComponent {...props} />\n    </Profiler>\n  );\n\n  Wrapped.displayName = `profiler(${componentDisplayName})`;\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\n/**\n *\n * `useProfiler` is a React hook that profiles a React component.\n *\n * Requires React 16.8 or above.\n * @param name displayName of component being profiled\n */\nfunction useProfiler(\n  name: string,\n  options: { disabled?: boolean; hasRenderSpan?: boolean } = {\n    disabled: false,\n    hasRenderSpan: true,\n  },\n): void {\n  const [mountSpan] = React.useState(() => {\n    if (options && options.disabled) {\n      return undefined;\n    }\n\n    const activeTransaction = getActiveTransaction();\n    if (activeTransaction) {\n      return activeTransaction.startChild({\n        description: `<${name}>`,\n        op: REACT_MOUNT_OP,\n      });\n    }\n\n    return undefined;\n  });\n\n  React.useEffect(() => {\n    if (mountSpan) {\n      mountSpan.finish();\n    }\n\n    return (): void => {\n      if (mountSpan && options.hasRenderSpan) {\n        mountSpan.startChild({\n          description: `<${name}>`,\n          endTimestamp: timestampWithMs(),\n          op: REACT_RENDER_OP,\n          startTimestamp: mountSpan.endTimestamp,\n        });\n      }\n    };\n    // We only want this to run once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n}\n\nexport { withProfiler, Profiler, useProfiler };\n\n/** Grabs active transaction off scope */\nexport function getActiveTransaction<T extends Transaction>(hub: Hub = getCurrentHub()): T | undefined {\n  if (hub) {\n    const scope = hub.getScope();\n    if (scope) {\n      return scope.getTransaction() as T | undefined;\n    }\n  }\n\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}