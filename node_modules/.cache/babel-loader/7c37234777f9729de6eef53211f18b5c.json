{"ast":null,"code":"import { getGlobalObject } from '@sentry/utils'; // Many of the types below had to be mocked out to prevent typescript issues\n// these types are required for correct functionality.\n\nvar global = getGlobalObject();\n/**\n * Creates routing instrumentation for React Router v3\n * Works for React Router >= 3.2.0 and < 4.0.0\n *\n * @param history object from the `history` library\n * @param routes a list of all routes, should be\n * @param match `Router.match` utility\n */\n\nfunction reactRouterV3Instrumentation(history, routes, match) {\n  return function (startTransaction) {\n    var startTransactionOnPageLoad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var startTransactionOnLocationChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var activeTransaction;\n    var prevName; // Have to use global.location because history.location might not be defined.\n\n    if (startTransactionOnPageLoad && global && global.location) {\n      normalizeTransactionName(routes, global.location, match, function (localName) {\n        var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'url';\n        prevName = localName;\n        activeTransaction = startTransaction({\n          name: prevName,\n          op: 'pageload',\n          tags: {\n            'routing.instrumentation': 'react-router-v3'\n          },\n          metadata: {\n            source: source\n          }\n        });\n      });\n    }\n\n    if (startTransactionOnLocationChange && history.listen) {\n      history.listen(function (location) {\n        if (location.action === 'PUSH' || location.action === 'POP') {\n          if (activeTransaction) {\n            activeTransaction.finish();\n          }\n\n          var tags = {\n            'routing.instrumentation': 'react-router-v3'\n          };\n\n          if (prevName) {\n            tags.from = prevName;\n          }\n\n          normalizeTransactionName(routes, location, match, function (localName) {\n            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'url';\n            prevName = localName;\n            activeTransaction = startTransaction({\n              name: prevName,\n              op: 'navigation',\n              tags: tags,\n              metadata: {\n                source: source\n              }\n            });\n          });\n        }\n      });\n    }\n  };\n}\n/**\n * Normalize transaction names using `Router.match`\n */\n\n\nfunction normalizeTransactionName(appRoutes, location, match, callback) {\n  var name = location.pathname;\n  match({\n    location: location,\n    routes: appRoutes\n  }, function (error, _redirectLocation, renderProps) {\n    if (error || !renderProps) {\n      return callback(name);\n    }\n\n    var routePath = getRouteStringFromRoutes(renderProps.routes || []);\n\n    if (routePath.length === 0 || routePath === '/*') {\n      return callback(name);\n    }\n\n    name = routePath;\n    return callback(name, 'route');\n  });\n}\n/**\n * Generate route name from array of routes\n */\n\n\nfunction getRouteStringFromRoutes(routes) {\n  if (!Array.isArray(routes) || routes.length === 0) {\n    return '';\n  }\n\n  var routesWithPaths = routes.filter(function (route) {\n    return !!route.path;\n  });\n  var index = -1;\n\n  for (var x = routesWithPaths.length - 1; x >= 0; x--) {\n    var route = routesWithPaths[x];\n\n    if (route.path && route.path.startsWith('/')) {\n      index = x;\n      break;\n    }\n  }\n\n  return routesWithPaths.slice(index).filter(function (_ref) {\n    var path = _ref.path;\n    return !!path;\n  }).map(function (_ref2) {\n    var path = _ref2.path;\n    return path;\n  }).join('');\n}\n\nexport { reactRouterV3Instrumentation };","map":null,"metadata":{},"sourceType":"module"}