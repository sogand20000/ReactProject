{"ast":null,"code":"import { getCurrentHub, addGlobalEventProcessor } from '@sentry/core';\nimport { isInstanceOf } from '@sentry/utils';\nimport { exceptionFromError } from '../eventbuilder.js';\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n/** Adds SDK info to an event. */\n\nclass LinkedErrors {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'LinkedErrors';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  __init() {\n    this.name = LinkedErrors.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    ;\n\n    LinkedErrors.prototype.__init.call(this);\n\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setupOnce() {\n    var client = getCurrentHub().getClient();\n\n    if (!client) {\n      return;\n    }\n\n    addGlobalEventProcessor((event, hint) => {\n      var self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;\n    });\n  }\n\n}\n\nLinkedErrors.__initStatic();\n/**\n * @inheritDoc\n */\n\n\nfunction _handler(parser, key, limit, event, hint) {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n\n  var linkedErrors = _walkErrorTree(parser, limit, hint.originalException, key);\n\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n/**\n * JSDOC\n */\n\n\nfunction _walkErrorTree(parser, limit, error, key) {\n  let stack = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n\n  var exception = exceptionFromError(parser, error[key]);\n  return _walkErrorTree(parser, limit, error[key], key, [exception, ...stack]);\n}\n\nexport { LinkedErrors, _handler, _walkErrorTree };","map":{"version":3,"mappings":";;;AAOA;AACA;AAOA;;;EAEA;AACA;AACA;EACA;IAAA;EAAA;EAEA;AACA;AACA;;;EACAA;IAAA;EAAA;EAEA;AACA;AACA;;EAGA;AACA;AACA;;EAGA;AACA;AACA;;;EACAC;IAAA;IAAA;;IAAAC;;IACA;IACA;EACA;EAEA;AACA;AACA;;;EACAC;IACA;;IACA;MACA;IACA;;IACAC;MACA;MACA;IACA,CAHA;EAIA;;;;AACAF;AAEA;AACA;AACA;;;kBAEAG,QACAC,KACAC,OACAC,OACAC,MACA;EACA;IACA;EACA;;EACA;;EACAD;EACA;AACA;AAEA;AACA;AACA;;;wBAEAH,QACAE,OACAG,OACAJ,KAEA;EAAA,IADAK,KACA,uEADA,EACA;;EACA;IACA;EACA;;EACA;EACA;AACA","names":["__init","constructor","LinkedErrors","setupOnce","addGlobalEventProcessor","parser","key","limit","event","hint","error","stack"],"sources":["C:\\Users\\Somayeh\\Downloads\\Video\\ReactMosh\\New folder\\ReactPro\\my-app\\node_modules\\src\\integrations\\linkederrors.ts"],"sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration, StackParser } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { BrowserClient } from '../client';\nimport { exceptionFromError } from '../eventbuilder';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: LinkedErrorsOptions['key'];\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: LinkedErrorsOptions['limit'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    const client = getCurrentHub().getClient<BrowserClient>();\n    if (!client) {\n      return;\n    }\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;\n    });\n  }\n}\n\n/**\n * @inheritDoc\n */\nexport function _handler(\n  parser: StackParser,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): Event | null {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(parser, limit, hint.originalException as ExtendedError, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nexport function _walkErrorTree(\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  stack: Exception[] = [],\n): Exception[] {\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const exception = exceptionFromError(parser, error[key]);\n  return _walkErrorTree(parser, limit, error[key], key, [exception, ...stack]);\n}\n"]},"metadata":{},"sourceType":"module"}