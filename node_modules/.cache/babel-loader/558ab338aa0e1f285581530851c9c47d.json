{"ast":null,"code":"import { makePromiseBuffer, forEachEnvelopeItem, envelopeItemTypeToDataCategory, isRateLimited, resolvedSyncPromise, createEnvelope, serializeEnvelope, logger, updateRateLimits, SentryError } from '@sentry/utils';\nvar DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\n\nfunction createTransport(options, makeRequest) {\n  var buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : makePromiseBuffer(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE);\n  var rateLimits = {};\n\n  var flush = function flush(timeout) {\n    return buffer.drain(timeout);\n  };\n\n  function send(envelope) {\n    var filteredEnvelopeItems = []; // Drop rate limited items from envelope\n\n    forEachEnvelopeItem(envelope, function (item, type) {\n      var envelopeItemDataCategory = envelopeItemTypeToDataCategory(type);\n\n      if (isRateLimited(rateLimits, envelopeItemDataCategory)) {\n        options.recordDroppedEvent('ratelimit_backoff', envelopeItemDataCategory);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    }); // Skip sending if envelope is empty after filtering out rate limited events\n\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise();\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    var filteredEnvelope = createEnvelope(envelope[0], filteredEnvelopeItems); // Creates client report for each item in an envelope\n\n    var recordEnvelopeLoss = function recordEnvelopeLoss(reason) {\n      forEachEnvelopeItem(filteredEnvelope, function (_, type) {\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type));\n      });\n    };\n\n    var requestTask = function requestTask() {\n      return makeRequest({\n        body: serializeEnvelope(filteredEnvelope, options.textEncoder)\n      }).then(function (response) {\n        // We don't want to throw on NOK responses, but we want to at least log them\n        if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"Sentry responded with status code \".concat(response.statusCode, \" to sent event.\"));\n        }\n\n        rateLimits = updateRateLimits(rateLimits, response);\n      }, function (error) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Failed while sending event:', error);\n        recordEnvelopeLoss('network_error');\n      });\n    };\n\n    return buffer.add(requestTask).then(function (result) {\n      return result;\n    }, function (error) {\n      if (error instanceof SentryError) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Skipped sending event because buffer is full.');\n        recordEnvelopeLoss('queue_overflow');\n        return resolvedSyncPromise();\n      } else {\n        throw error;\n      }\n    });\n  }\n\n  return {\n    send: send,\n    flush: flush\n  };\n}\n\nexport { DEFAULT_TRANSPORT_BUFFER_SIZE, createTransport };","map":null,"metadata":{},"sourceType":"module"}