{"ast":null,"code":"import { isThenable } from './is.js';\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n\n/** SyncPromise internal states */\n\nvar States;\n\n(function (States) {\n  /** Pending */\n  var PENDING = 0;\n  States[States[\"PENDING\"] = PENDING] = \"PENDING\";\n  /** Resolved / OK */\n\n  var RESOLVED = 1;\n  States[States[\"RESOLVED\"] = RESOLVED] = \"RESOLVED\";\n  /** Rejected / Error */\n\n  var REJECTED = 2;\n  States[States[\"REJECTED\"] = REJECTED] = \"REJECTED\";\n})(States || (States = {})); // Overloads so we can call resolvedSyncPromise without arguments and generic argument\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\n\n\nfunction resolvedSyncPromise(value) {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\n\n\nfunction rejectedSyncPromise(reason) {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\n\n\nclass SyncPromise {\n  __init() {\n    this._state = States.PENDING;\n  }\n\n  __init2() {\n    this._handlers = [];\n  }\n\n  constructor(executor) {\n    ;\n\n    SyncPromise.prototype.__init.call(this);\n\n    SyncPromise.prototype.__init2.call(this);\n\n    SyncPromise.prototype.__init3.call(this);\n\n    SyncPromise.prototype.__init4.call(this);\n\n    SyncPromise.prototype.__init5.call(this);\n\n    SyncPromise.prototype.__init6.call(this);\n\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n  /** JSDoc */\n\n\n  then(onfulfilled, onrejected) {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([false, result => {\n        if (!onfulfilled) {\n          // TODO: ¯\\_(ツ)_/¯\n          // TODO: FIXME\n          resolve(result);\n        } else {\n          try {\n            resolve(onfulfilled(result));\n          } catch (e) {\n            reject(e);\n          }\n        }\n      }, reason => {\n        if (!onrejected) {\n          reject(reason);\n        } else {\n          try {\n            resolve(onrejected(reason));\n          } catch (e) {\n            reject(e);\n          }\n        }\n      }]);\n\n      this._executeHandlers();\n    });\n  }\n  /** JSDoc */\n\n\n  catch(onrejected) {\n    return this.then(val => val, onrejected);\n  }\n  /** JSDoc */\n\n\n  finally(onfinally) {\n    return new SyncPromise((resolve, reject) => {\n      let val;\n      let isRejected;\n      return this.then(value => {\n        isRejected = false;\n        val = value;\n\n        if (onfinally) {\n          onfinally();\n        }\n      }, reason => {\n        isRejected = true;\n        val = reason;\n\n        if (onfinally) {\n          onfinally();\n        }\n      }).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val);\n      });\n    });\n  }\n  /** JSDoc */\n\n\n  __init3() {\n    this._resolve = value => {\n      this._setResult(States.RESOLVED, value);\n    };\n  }\n  /** JSDoc */\n\n\n  __init4() {\n    this._reject = reason => {\n      this._setResult(States.REJECTED, reason);\n    };\n  }\n  /** JSDoc */\n\n\n  __init5() {\n    this._setResult = (state, value) => {\n      if (this._state !== States.PENDING) {\n        return;\n      }\n\n      if (isThenable(value)) {\n        void value.then(this._resolve, this._reject);\n        return;\n      }\n\n      this._state = state;\n      this._value = value;\n\n      this._executeHandlers();\n    };\n  }\n  /** JSDoc */\n\n\n  __init6() {\n    this._executeHandlers = () => {\n      if (this._state === States.PENDING) {\n        return;\n      }\n\n      var cachedHandlers = this._handlers.slice();\n\n      this._handlers = [];\n      cachedHandlers.forEach(handler => {\n        if (handler[0]) {\n          return;\n        }\n\n        if (this._state === States.RESOLVED) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          handler[1](this._value);\n        }\n\n        if (this._state === States.REJECTED) {\n          handler[2](this._value);\n        }\n\n        handler[0] = true;\n      });\n    };\n  }\n\n}\n\nexport { SyncPromise, rejectedSyncPromise, resolvedSyncPromise };","map":{"version":3,"mappings":";AAAA;;AAMA;;AACA;;AAAA;EACA;EACA;EAAAA;EACA;;EACA;EAAAA;EACA;;EACA;EAAAA;AACA,CAPA,EAOAA,uBAPA,E,CASA;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;EAEA;IACAC;EACA,CAFA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;EAEA;IACAC;EACA,CAFA;AAGA;AAEA;AACA;AACA;AACA;;;AACA;EACAC;IAAA;EAAA;;EACAC;IAAA;EAAA;;EAGAC,YACAC,QADA,EAEA;IAAA;;IAAAC;;IAAAA;;IAAAA;;IAAAA;;IAAAA;;IAAAA;;IACA;MACAD;IACA,CAFA,CAEA;MACA;IACA;EACA;EAEA;;;EACAE,KACAC,WADA,EAEAC,UAFA,EAGA;IACA;MACA,qBACA,KADA,EAEAC;QACA;UACA;UACA;UACAV;QACA,CAJA,MAIA;UACA;YACAA;UACA,CAFA,CAEA;YACAC;UACA;QACA;MACA,CAdA,EAeAU;QACA;UACAV;QACA,CAFA,MAEA;UACA;YACAD;UACA,CAFA,CAEA;YACAC;UACA;QACA;MACA,CAzBA;;MA2BA;IACA,CA7BA;EA8BA;EAEA;;;EACAW,MACAH,UADA,EAEA;IACA;EACA;EAEA;;;EACAI;IACA;MACA;MACA;MAEA,iBACAC;QACAC;QACAC;;QACA;UACAC;QACA;MACA,CAPA,EAQAN;QACAI;QACAC;;QACA;UACAC;QACA;MACA,CAdA,EAeAV,IAfA,CAeA;QACA;UACAN;UACA;QACA;;QAEAD;MACA,CAtBA;IAuBA,CA3BA;EA4BA;EAEA;;;EACAkB;IAAA;MACA;IACA,CAFA;EAEA;EAEA;;;EACAC;IAAA;MACA;IACA,CAFA;EAEA;EAEA;;;EACAC;IAAA;MACA;QACA;MACA;;MAEA;QACA;QACA;MACA;;MAEA;MACA;;MAEA;IACA,CAdA;EAcA;EAEA;;;EACAC;IAAA;MACA;QACA;MACA;;MAEA;;MACA;MAEAC;QACA;UACA;QACA;;QAEA;UACA;UACAC;QACA;;QAEA;UACAA;QACA;;QAEAA;MACA,CAfA;IAgBA,CAxBA;EAwBA;;AA/IA","names":["States","resolve","reject","__init","__init2","constructor","executor","SyncPromise","then","onfulfilled","onrejected","result","reason","catch","finally","value","isRejected","val","onfinally","__init3","__init4","__init5","__init6","cachedHandlers","handler"],"sources":["C:\\Users\\Somayeh\\Downloads\\Video\\ReactMosh\\New folder\\ReactPro\\my-app\\node_modules\\@sentry\\src\\syncpromise.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n"]},"metadata":{},"sourceType":"module"}