{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport * as Sentry from '@sentry/react';\nimport logger from './logService';\naxios.interceptors.response.use(null, error => {\n  const expectedError = error.response && error.response.status >= 400 && error.response.status < 500;\n\n  if (!expectedError) {\n    toast('Logging the error', error);\n    logger.log(error);\n    console.log('Logging the error', error);\n    alert('An unexpected error occurred');\n  }\n\n  return Promise.reject(error);\n});\nexport default axios;","map":{"version":3,"names":["axios","toast","Sentry","logger","interceptors","response","use","error","expectedError","status","log","console","alert","Promise","reject"],"sources":["C:/Users/Somayeh/Downloads/Video/ReactMosh/New folder/ReactPro/my-app/src/services/httpService.js"],"sourcesContent":["import axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport * as Sentry from '@sentry/react'\r\nimport logger from './logService'\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n  const expectedError =\r\n    error.response &&\r\n    error.response.status >= 400 &&\r\n    error.response.status < 500\r\n  if (!expectedError) {\r\n    toast('Logging the error', error)\r\n    logger.log(error)\r\n    console.log('Logging the error', error)\r\n    alert('An unexpected error occurred')\r\n  }\r\n\r\n  return Promise.reject(error)\r\n})\r\nexport default axios\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEAH,KAAK,CAACI,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgC,IAAhC,EAAuCC,KAAD,IAAW;EAC/C,MAAMC,aAAa,GACjBD,KAAK,CAACF,QAAN,IACAE,KAAK,CAACF,QAAN,CAAeI,MAAf,IAAyB,GADzB,IAEAF,KAAK,CAACF,QAAN,CAAeI,MAAf,GAAwB,GAH1B;;EAIA,IAAI,CAACD,aAAL,EAAoB;IAClBP,KAAK,CAAC,mBAAD,EAAsBM,KAAtB,CAAL;IACAJ,MAAM,CAACO,GAAP,CAAWH,KAAX;IACAI,OAAO,CAACD,GAAR,CAAY,mBAAZ,EAAiCH,KAAjC;IACAK,KAAK,CAAC,8BAAD,CAAL;EACD;;EAED,OAAOC,OAAO,CAACC,MAAR,CAAeP,KAAf,CAAP;AACD,CAbD;AAcA,eAAeP,KAAf"},"metadata":{},"sourceType":"module"}